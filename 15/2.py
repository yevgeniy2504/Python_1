# –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π
# –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë
# —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
# üìå–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
# –º–æ–¥—É–ª—å logging.


import logging
import json


def save_to_json(func):
    def wrapper(*args):
        result = func(*args)
        logging.info(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {args}, –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        with open('new_json.json', 'a') as jsonf:
            json.dump(result, jsonf)

    return wrapper


@save_to_json
def solve_quadratic_equation(a: int, b: int, c: int):
    D = b ** 2 - 4 * a * c
    if D < 0:
        return None, None
    elif D == 0:
        x = -b / (2 * a)
        return x, None
    else:
        x1 = (-b + D ** 0.5) / (2 * a)
        x2 = (-b - D ** 0.5) / (2 * a)
        return x1, x2


if __name__ == '__main__':
    logging.basicConfig(filename='log.txt', level=logging.INFO)
    FORMAT = "{asctime} - {message}"
    solve_quadratic_equation(5, 6, 1)
