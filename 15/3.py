# –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
# üìå–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
# ‚óã—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã–¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã–∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
# ‚óã–∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
# ‚óã—Ä–µ–∑—É–ª—å—Ç–∞—Ç.


import logging
import json


FORMAT = "{levelname} - {asctime}: {msg}"
logging.basicConfig(
    format = FORMAT,
    filename="log.log",
    encoding='utf-8',
    style='{',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


def deco_logger(func):
    def wrapper(*args):
        result = func(*args)
        logging.info(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {args}, –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return wrapper


@deco_logger
def solve_quadratic_equation(a: int, b: int, c: int):
    D = b ** 2 - 4 * a * c
    if D < 0:
        return None, None
    elif D == 0:
        x = -b / (2 * a)
        return x, None
    else:
        x1 = (-b + D ** 0.5) / (2 * a)
        x2 = (-b - D ** 0.5) / (2 * a)
        return x1, x2


if __name__ == '__main__':
    solve_quadratic_equation(5, 6, 1)
